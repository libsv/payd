// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/libsv/go-bt/v2"
	"github.com/libsv/payd"
	"sync"
)

// Ensure, that FeeQuoteReaderMock does implement payd.FeeQuoteReader.
// If this is not the case, regenerate this file with moq.
var _ payd.FeeQuoteReader = &FeeQuoteReaderMock{}

// FeeQuoteReaderMock is a mock implementation of payd.FeeQuoteReader.
//
// 	func TestSomethingThatUsesFeeQuoteReader(t *testing.T) {
//
// 		// make and configure a mocked payd.FeeQuoteReader
// 		mockedFeeQuoteReader := &FeeQuoteReaderMock{
// 			FeeQuoteFunc: func(ctx context.Context, invoiceID string) (*bt.FeeQuote, error) {
// 				panic("mock out the FeeQuote method")
// 			},
// 		}
//
// 		// use mockedFeeQuoteReader in code that requires payd.FeeQuoteReader
// 		// and then make assertions.
//
// 	}
type FeeQuoteReaderMock struct {
	// FeeQuoteFunc mocks the FeeQuote method.
	FeeQuoteFunc func(ctx context.Context, invoiceID string) (*bt.FeeQuote, error)

	// calls tracks calls to the methods.
	calls struct {
		// FeeQuote holds details about calls to the FeeQuote method.
		FeeQuote []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InvoiceID is the invoiceID argument value.
			InvoiceID string
		}
	}
	lockFeeQuote sync.RWMutex
}

// FeeQuote calls FeeQuoteFunc.
func (mock *FeeQuoteReaderMock) FeeQuote(ctx context.Context, invoiceID string) (*bt.FeeQuote, error) {
	if mock.FeeQuoteFunc == nil {
		panic("FeeQuoteReaderMock.FeeQuoteFunc: method is nil but FeeQuoteReader.FeeQuote was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		InvoiceID string
	}{
		Ctx:       ctx,
		InvoiceID: invoiceID,
	}
	mock.lockFeeQuote.Lock()
	mock.calls.FeeQuote = append(mock.calls.FeeQuote, callInfo)
	mock.lockFeeQuote.Unlock()
	return mock.FeeQuoteFunc(ctx, invoiceID)
}

// FeeQuoteCalls gets all the calls that were made to FeeQuote.
// Check the length with:
//     len(mockedFeeQuoteReader.FeeQuoteCalls())
func (mock *FeeQuoteReaderMock) FeeQuoteCalls() []struct {
	Ctx       context.Context
	InvoiceID string
} {
	var calls []struct {
		Ctx       context.Context
		InvoiceID string
	}
	mock.lockFeeQuote.RLock()
	calls = mock.calls.FeeQuote
	mock.lockFeeQuote.RUnlock()
	return calls
}
