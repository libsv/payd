// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/libsv/go-bt/v2"
	"github.com/libsv/payd"
	"sync"
)

// Ensure, that FeeReaderMock does implement payd.FeeReader.
// If this is not the case, regenerate this file with moq.
var _ payd.FeeReader = &FeeReaderMock{}

// FeeReaderMock is a mock implementation of payd.FeeReader.
//
// 	func TestSomethingThatUsesFeeReader(t *testing.T) {
//
// 		// make and configure a mocked payd.FeeReader
// 		mockedFeeReader := &FeeReaderMock{
// 			FeesFunc: func(ctx context.Context, invoiceID string) (*bt.FeeQuote, error) {
// 				panic("mock out the Fees method")
// 			},
// 		}
//
// 		// use mockedFeeReader in code that requires payd.FeeReader
// 		// and then make assertions.
//
// 	}
type FeeReaderMock struct {
	// FeesFunc mocks the Fees method.
	FeesFunc func(ctx context.Context, invoiceID string) (*bt.FeeQuote, error)

	// calls tracks calls to the methods.
	calls struct {
		// Fees holds details about calls to the Fees method.
		Fees []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InvoiceID is the invoiceID argument value.
			InvoiceID string
		}
	}
	lockFees sync.RWMutex
}

// Fees calls FeesFunc.
func (mock *FeeReaderMock) Fees(ctx context.Context, invoiceID string) (*bt.FeeQuote, error) {
	if mock.FeesFunc == nil {
		panic("FeeReaderMock.FeesFunc: method is nil but FeeReader.Fees was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		InvoiceID string
	}{
		Ctx:       ctx,
		InvoiceID: invoiceID,
	}
	mock.lockFees.Lock()
	mock.calls.Fees = append(mock.calls.Fees, callInfo)
	mock.lockFees.Unlock()
	return mock.FeesFunc(ctx, invoiceID)
}

// FeesCalls gets all the calls that were made to Fees.
// Check the length with:
//     len(mockedFeeReader.FeesCalls())
func (mock *FeeReaderMock) FeesCalls() []struct {
	Ctx       context.Context
	InvoiceID string
} {
	var calls []struct {
		Ctx       context.Context
		InvoiceID string
	}
	mock.lockFees.RLock()
	calls = mock.calls.Fees
	mock.lockFees.RUnlock()
	return calls
}
