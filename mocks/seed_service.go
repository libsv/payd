// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"github.com/libsv/payd"
	"sync"
)

// Ensure, that SeedServiceMock does implement payd.SeedService.
// If this is not the case, regenerate this file with moq.
var _ payd.SeedService = &SeedServiceMock{}

// SeedServiceMock is a mock implementation of payd.SeedService.
//
// 	func TestSomethingThatUsesSeedService(t *testing.T) {
//
// 		// make and configure a mocked payd.SeedService
// 		mockedSeedService := &SeedServiceMock{
// 			Uint64Func: func() (uint64, error) {
// 				panic("mock out the Uint64 method")
// 			},
// 		}
//
// 		// use mockedSeedService in code that requires payd.SeedService
// 		// and then make assertions.
//
// 	}
type SeedServiceMock struct {
	// Uint64Func mocks the Uint64 method.
	Uint64Func func() (uint64, error)

	// calls tracks calls to the methods.
	calls struct {
		// Uint64 holds details about calls to the Uint64 method.
		Uint64 []struct {
		}
	}
	lockUint64 sync.RWMutex
}

// Uint64 calls Uint64Func.
func (mock *SeedServiceMock) Uint64() (uint64, error) {
	if mock.Uint64Func == nil {
		panic("SeedServiceMock.Uint64Func: method is nil but SeedService.Uint64 was just called")
	}
	callInfo := struct {
	}{}
	mock.lockUint64.Lock()
	mock.calls.Uint64 = append(mock.calls.Uint64, callInfo)
	mock.lockUint64.Unlock()
	return mock.Uint64Func()
}

// Uint64Calls gets all the calls that were made to Uint64.
// Check the length with:
//     len(mockedSeedService.Uint64Calls())
func (mock *SeedServiceMock) Uint64Calls() []struct {
} {
	var calls []struct {
	}
	mock.lockUint64.RLock()
	calls = mock.calls.Uint64
	mock.lockUint64.RUnlock()
	return calls
}
