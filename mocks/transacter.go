// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/libsv/payd"
	"sync"
)

// Ensure, that TransacterMock does implement payd.Transacter.
// If this is not the case, regenerate this file with moq.
var _ payd.Transacter = &TransacterMock{}

// TransacterMock is a mock implementation of payd.Transacter.
//
// 	func TestSomethingThatUsesTransacter(t *testing.T) {
//
// 		// make and configure a mocked payd.Transacter
// 		mockedTransacter := &TransacterMock{
// 			CommitFunc: func(ctx context.Context) error {
// 				panic("mock out the Commit method")
// 			},
// 			RollbackFunc: func(ctx context.Context) error {
// 				panic("mock out the Rollback method")
// 			},
// 			WithTxFunc: func(ctx context.Context) context.Context {
// 				panic("mock out the WithTx method")
// 			},
// 		}
//
// 		// use mockedTransacter in code that requires payd.Transacter
// 		// and then make assertions.
//
// 	}
type TransacterMock struct {
	// CommitFunc mocks the Commit method.
	CommitFunc func(ctx context.Context) error

	// RollbackFunc mocks the Rollback method.
	RollbackFunc func(ctx context.Context) error

	// WithTxFunc mocks the WithTx method.
	WithTxFunc func(ctx context.Context) context.Context

	// calls tracks calls to the methods.
	calls struct {
		// Commit holds details about calls to the Commit method.
		Commit []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Rollback holds details about calls to the Rollback method.
		Rollback []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// WithTx holds details about calls to the WithTx method.
		WithTx []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockCommit   sync.RWMutex
	lockRollback sync.RWMutex
	lockWithTx   sync.RWMutex
}

// Commit calls CommitFunc.
func (mock *TransacterMock) Commit(ctx context.Context) error {
	if mock.CommitFunc == nil {
		panic("TransacterMock.CommitFunc: method is nil but Transacter.Commit was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockCommit.Lock()
	mock.calls.Commit = append(mock.calls.Commit, callInfo)
	mock.lockCommit.Unlock()
	return mock.CommitFunc(ctx)
}

// CommitCalls gets all the calls that were made to Commit.
// Check the length with:
//     len(mockedTransacter.CommitCalls())
func (mock *TransacterMock) CommitCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockCommit.RLock()
	calls = mock.calls.Commit
	mock.lockCommit.RUnlock()
	return calls
}

// Rollback calls RollbackFunc.
func (mock *TransacterMock) Rollback(ctx context.Context) error {
	if mock.RollbackFunc == nil {
		panic("TransacterMock.RollbackFunc: method is nil but Transacter.Rollback was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRollback.Lock()
	mock.calls.Rollback = append(mock.calls.Rollback, callInfo)
	mock.lockRollback.Unlock()
	return mock.RollbackFunc(ctx)
}

// RollbackCalls gets all the calls that were made to Rollback.
// Check the length with:
//     len(mockedTransacter.RollbackCalls())
func (mock *TransacterMock) RollbackCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRollback.RLock()
	calls = mock.calls.Rollback
	mock.lockRollback.RUnlock()
	return calls
}

// WithTx calls WithTxFunc.
func (mock *TransacterMock) WithTx(ctx context.Context) context.Context {
	if mock.WithTxFunc == nil {
		panic("TransacterMock.WithTxFunc: method is nil but Transacter.WithTx was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockWithTx.Lock()
	mock.calls.WithTx = append(mock.calls.WithTx, callInfo)
	mock.lockWithTx.Unlock()
	return mock.WithTxFunc(ctx)
}

// WithTxCalls gets all the calls that were made to WithTx.
// Check the length with:
//     len(mockedTransacter.WithTxCalls())
func (mock *TransacterMock) WithTxCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockWithTx.RLock()
	calls = mock.calls.WithTx
	mock.lockWithTx.RUnlock()
	return calls
}
