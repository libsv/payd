// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/libsv/go-bc/spv"
	"github.com/libsv/go-bt/v2"
)

// Ensure, that EnvelopeCreatorMock does implement spv.EnvelopeCreator.
// If this is not the case, regenerate this file with moq.
var _ spv.EnvelopeCreator = &EnvelopeCreatorMock{}

// EnvelopeCreatorMock is a mock implementation of spv.EnvelopeCreator.
//
// 	func TestSomethingThatUsesEnvelopeCreator(t *testing.T) {
//
// 		// make and configure a mocked spv.EnvelopeCreator
// 		mockedEnvelopeCreator := &EnvelopeCreatorMock{
// 			CreateEnvelopeFunc: func(contextMoqParam context.Context, tx *bt.Tx) (*spv.Envelope, error) {
// 				panic("mock out the CreateEnvelope method")
// 			},
// 		}
//
// 		// use mockedEnvelopeCreator in code that requires spv.EnvelopeCreator
// 		// and then make assertions.
//
// 	}
type EnvelopeCreatorMock struct {
	// CreateEnvelopeFunc mocks the CreateEnvelope method.
	CreateEnvelopeFunc func(contextMoqParam context.Context, tx *bt.Tx) (*spv.Envelope, error)

	// calls tracks calls to the methods.
	calls struct {
		// CreateEnvelope holds details about calls to the CreateEnvelope method.
		CreateEnvelope []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Tx is the tx argument value.
			Tx *bt.Tx
		}
	}
	lockCreateEnvelope sync.RWMutex
}

// CreateEnvelope calls CreateEnvelopeFunc.
func (mock *EnvelopeCreatorMock) CreateEnvelope(contextMoqParam context.Context, tx *bt.Tx) (*spv.Envelope, error) {
	if mock.CreateEnvelopeFunc == nil {
		panic("EnvelopeCreatorMock.CreateEnvelopeFunc: method is nil but EnvelopeCreator.CreateEnvelope was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Tx              *bt.Tx
	}{
		ContextMoqParam: contextMoqParam,
		Tx:              tx,
	}
	mock.lockCreateEnvelope.Lock()
	mock.calls.CreateEnvelope = append(mock.calls.CreateEnvelope, callInfo)
	mock.lockCreateEnvelope.Unlock()
	return mock.CreateEnvelopeFunc(contextMoqParam, tx)
}

// CreateEnvelopeCalls gets all the calls that were made to CreateEnvelope.
// Check the length with:
//     len(mockedEnvelopeCreator.CreateEnvelopeCalls())
func (mock *EnvelopeCreatorMock) CreateEnvelopeCalls() []struct {
	ContextMoqParam context.Context
	Tx              *bt.Tx
} {
	var calls []struct {
		ContextMoqParam context.Context
		Tx              *bt.Tx
	}
	mock.lockCreateEnvelope.RLock()
	calls = mock.calls.CreateEnvelope
	mock.lockCreateEnvelope.RUnlock()
	return calls
}
