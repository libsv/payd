// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/libsv/payd"
)

// Ensure, that PeerChannelsNotifyServiceMock does implement payd.PeerChannelsNotifyService.
// If this is not the case, regenerate this file with moq.
var _ payd.PeerChannelsNotifyService = &PeerChannelsNotifyServiceMock{}

// PeerChannelsNotifyServiceMock is a mock implementation of payd.PeerChannelsNotifyService.
//
// 	func TestSomethingThatUsesPeerChannelsNotifyService(t *testing.T) {
//
// 		// make and configure a mocked payd.PeerChannelsNotifyService
// 		mockedPeerChannelsNotifyService := &PeerChannelsNotifyServiceMock{
// 			RegisterHandlerFunc: func(ht payd.PeerChannelHandlerType, hdlr payd.PeerChannelsMessageHandler) payd.PeerChannelsNotifyService {
// 				panic("mock out the RegisterHandler method")
// 			},
// 			SubscribeFunc: func(ctx context.Context, args *payd.PeerChannel) error {
// 				panic("mock out the Subscribe method")
// 			},
// 		}
//
// 		// use mockedPeerChannelsNotifyService in code that requires payd.PeerChannelsNotifyService
// 		// and then make assertions.
//
// 	}
type PeerChannelsNotifyServiceMock struct {
	// RegisterHandlerFunc mocks the RegisterHandler method.
	RegisterHandlerFunc func(ht payd.PeerChannelHandlerType, hdlr payd.PeerChannelsMessageHandler) payd.PeerChannelsNotifyService

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(ctx context.Context, args *payd.PeerChannel) error

	// calls tracks calls to the methods.
	calls struct {
		// RegisterHandler holds details about calls to the RegisterHandler method.
		RegisterHandler []struct {
			// Ht is the ht argument value.
			Ht payd.PeerChannelHandlerType
			// Hdlr is the hdlr argument value.
			Hdlr payd.PeerChannelsMessageHandler
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args *payd.PeerChannel
		}
	}
	lockRegisterHandler sync.RWMutex
	lockSubscribe       sync.RWMutex
}

// RegisterHandler calls RegisterHandlerFunc.
func (mock *PeerChannelsNotifyServiceMock) RegisterHandler(ht payd.PeerChannelHandlerType, hdlr payd.PeerChannelsMessageHandler) payd.PeerChannelsNotifyService {
	if mock.RegisterHandlerFunc == nil {
		panic("PeerChannelsNotifyServiceMock.RegisterHandlerFunc: method is nil but PeerChannelsNotifyService.RegisterHandler was just called")
	}
	callInfo := struct {
		Ht   payd.PeerChannelHandlerType
		Hdlr payd.PeerChannelsMessageHandler
	}{
		Ht:   ht,
		Hdlr: hdlr,
	}
	mock.lockRegisterHandler.Lock()
	mock.calls.RegisterHandler = append(mock.calls.RegisterHandler, callInfo)
	mock.lockRegisterHandler.Unlock()
	return mock.RegisterHandlerFunc(ht, hdlr)
}

// RegisterHandlerCalls gets all the calls that were made to RegisterHandler.
// Check the length with:
//     len(mockedPeerChannelsNotifyService.RegisterHandlerCalls())
func (mock *PeerChannelsNotifyServiceMock) RegisterHandlerCalls() []struct {
	Ht   payd.PeerChannelHandlerType
	Hdlr payd.PeerChannelsMessageHandler
} {
	var calls []struct {
		Ht   payd.PeerChannelHandlerType
		Hdlr payd.PeerChannelsMessageHandler
	}
	mock.lockRegisterHandler.RLock()
	calls = mock.calls.RegisterHandler
	mock.lockRegisterHandler.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *PeerChannelsNotifyServiceMock) Subscribe(ctx context.Context, args *payd.PeerChannel) error {
	if mock.SubscribeFunc == nil {
		panic("PeerChannelsNotifyServiceMock.SubscribeFunc: method is nil but PeerChannelsNotifyService.Subscribe was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args *payd.PeerChannel
	}{
		Ctx:  ctx,
		Args: args,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	return mock.SubscribeFunc(ctx, args)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//     len(mockedPeerChannelsNotifyService.SubscribeCalls())
func (mock *PeerChannelsNotifyServiceMock) SubscribeCalls() []struct {
	Ctx  context.Context
	Args *payd.PeerChannel
} {
	var calls []struct {
		Ctx  context.Context
		Args *payd.PeerChannel
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}
