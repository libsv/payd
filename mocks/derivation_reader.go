// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/libsv/payd"
	"sync"
)

// Ensure, that DerivationReaderMock does implement payd.DerivationReader.
// If this is not the case, regenerate this file with moq.
var _ payd.DerivationReader = &DerivationReaderMock{}

// DerivationReaderMock is a mock implementation of payd.DerivationReader.
//
// 	func TestSomethingThatUsesDerivationReader(t *testing.T) {
//
// 		// make and configure a mocked payd.DerivationReader
// 		mockedDerivationReader := &DerivationReaderMock{
// 			DerivationPathExistsFunc: func(ctx context.Context, args payd.DerivationExistsArgs) (bool, error) {
// 				panic("mock out the DerivationPathExists method")
// 			},
// 		}
//
// 		// use mockedDerivationReader in code that requires payd.DerivationReader
// 		// and then make assertions.
//
// 	}
type DerivationReaderMock struct {
	// DerivationPathExistsFunc mocks the DerivationPathExists method.
	DerivationPathExistsFunc func(ctx context.Context, args payd.DerivationExistsArgs) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// DerivationPathExists holds details about calls to the DerivationPathExists method.
		DerivationPathExists []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Args is the args argument value.
			Args payd.DerivationExistsArgs
		}
	}
	lockDerivationPathExists sync.RWMutex
}

// DerivationPathExists calls DerivationPathExistsFunc.
func (mock *DerivationReaderMock) DerivationPathExists(ctx context.Context, args payd.DerivationExistsArgs) (bool, error) {
	if mock.DerivationPathExistsFunc == nil {
		panic("DerivationReaderMock.DerivationPathExistsFunc: method is nil but DerivationReader.DerivationPathExists was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Args payd.DerivationExistsArgs
	}{
		Ctx:  ctx,
		Args: args,
	}
	mock.lockDerivationPathExists.Lock()
	mock.calls.DerivationPathExists = append(mock.calls.DerivationPathExists, callInfo)
	mock.lockDerivationPathExists.Unlock()
	return mock.DerivationPathExistsFunc(ctx, args)
}

// DerivationPathExistsCalls gets all the calls that were made to DerivationPathExists.
// Check the length with:
//     len(mockedDerivationReader.DerivationPathExistsCalls())
func (mock *DerivationReaderMock) DerivationPathExistsCalls() []struct {
	Ctx  context.Context
	Args payd.DerivationExistsArgs
} {
	var calls []struct {
		Ctx  context.Context
		Args payd.DerivationExistsArgs
	}
	mock.lockDerivationPathExists.RLock()
	calls = mock.calls.DerivationPathExists
	mock.lockDerivationPathExists.RUnlock()
	return calls
}
